"use strict";




function initMap() {

  var boxpolys = null;
  var directions;
  var distance;
  var googleMarkers = [];

  // creates map with hard coded center point with marker at Oakland
  var oakland = {lat: 37.8044, lng: -122.2711};

  //centers map template at oakland
  var mapOptions = {
    zoom: 8,
    center: oakland
  };

  var map = new google.maps.Map(document.getElementById('map'), mapOptions);




 //------------------Search by Radius------------------------------------------

  //allows places search with hard coded variables built into request //later use .value to set each element from the DOM
  var request = {
    location: oakland,
    radius: 500,
    types: ['restaurant']
  };

  //radar search allows a search for places within a search radius by keyword or type, will return up to 200 objects
  var service = new google.maps.places.PlacesService(map);
  service.radarSearch(request, callback);





  //---------------------Create InfoWindows----------------------------------




  var infowindow = new google.maps.InfoWindow();

  // //creates map marker at Oakland - location currently hard coded in
  var marker = new google.maps.Marker({
    position: oakland,
    map: map,
    title: 'Oakland, CA'
  });


  //creates window on marker click that displays custom text  (useful later when incorporating yelp)
  var windowContent = 'infowindow content goes here'; // double check google documentaion on this syntax when it becomes complicated

  var infowindow = new google.maps.InfoWindow({
    content: windowContent
  });


  //when marker clicked, show info window
  marker.addListener('click', function() {
    infowindow.open(map, marker);
  });



  //------------------Create Markers based on Places Search----------------

  function callback(results, status) {
    if (status === google.maps.places.PlacesServiceStatus.OK) {
      for (var i = 0; i < results.length; i++) {
        var place = results[i];
      createMarker(results[i]);
      }
    }
    else
      console.log('error: '+ status);
  }

  function createMarker(place) {
    var placeLoc = place.geometry.location;
    var marker = new google.maps.Marker({
      map: map,
      position: place.geometry.location
    });

    google.maps.event.addListener(marker, 'click', function() {
      service.getDetails(place, function(result, status) {
        if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
        }
      infowindow.setContent(result.name);
      infowindow.open(map, marker);
    });
  });
  }


//------------------display directions----------------------------------

  //Creates path overlay on map from start to end location, hard coded for stinson beach to petaluma
  function displayDirections() {

    var stinsonBeach = {lat:37.9005, lng: -122.6444};
    var petaluma = {lat: 38.2324, lng: -122.6367};

    var request = {
      origin: stinsonBeach, // start
      destination: petaluma, // end
      travelMode: google.maps.TravelMode.DRIVING
    };

    var directionsService = new google.maps.DirectionsService();
    directionsService.route(request, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);

        //assigns path variable to first item in Google's returned overview_path result (smooths out lat/long result into a line)
        var path = response.routes[0].overview_path;

        debugger;

        //creates boxes variable to be fed to routeBoxer with path and distance parameters
        // var boxes = routeBoxer.box(path, 2);
        // alert(boxes.length);
        // drawBoxes(boxes);
        // findPlaces(boxes,0);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });

    var directionsDisplay = new google.maps.DirectionsRenderer();
    directionsDisplay.setMap(map);


    var routeBoxer = new RouteBoxer();


  }

// Draw the array of boxes as polylines on the map // probably not needed (M)
function drawBoxes(boxes) {
  boxpolys = new Array(boxes.length);
  for (var i = 0; i < boxes.length; i++) {
    boxpolys[i] = new google.maps.Rectangle({
      bounds: boxes[i],
      fillOpacity: 0,
      strokeOpacity: 1.0,
      strokeColor: '#000000',
      strokeWeight: 1,
      map: map
    });
  }
}


  // displayDirections();


  //incorporate later when start and end are taken from DOM
  // var start = document.getElementById('start').value;
  // var end = document.getElementById('end').value;



  //------------Creating polyboxes to use for RouteBox library-------------------


  // Creates boxes around the overview path of the first route returned from the search

  //find places within each box iterating through the search index for the length of the box array
  function findPlaces(boxes, searchIndex) {
    var request = {
      bounds: boxes[searchIndex],
      types: ['restaurant']
    };


    var service = new google.maps.places.PlacesService(map);
    service.radarSearch(request, function (results, status) {
    if (status === google.maps.places.PlacesServiceStatus.OK) {
      for (var i = 0; i < results.length; i++) {
        var place = results[i];
        var marker = createMarker(place);
      }
      searchIndex++;
      if (searchIndex < boxes.length)
      findPlaces(boxes,searchIndex);
    }
    else
      console.log('error: '+ status);
  });



  function createMarker(place) {
    var placeLoc = place.geometry.location;
    var marker = new google.maps.Marker({
      map: map,
      position: place.geometry.location
    });

    google.maps.event.addListener(marker, 'click', function() {
      service.getDetails(place, function(result, status) {
        if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
        }
      infowindow.setContent(result.name);
      infowindow.open(map, marker);
    });
  });
  }
  }

}

initMap();






// do I need to covert distance to km from miles for routeBoxer?



// write function to draw the array of boxes as polylines on the map
// make a new Array of boxes.length
// iterate over boxpolys one at a time,
// for each boxpolys -- new google.maps.Rectangle ({set bounds, fill opacity, stroke opacity, stroke color, stroke wieght, map})


// write function to findPlaces(searchIndex)
// set variables for type, keyword, name from the DOM value -- hard code just one of these for MVP, read more later



